trigger: none
pr: none

schedules:
- cron: "0 0 * * *"
  displayName: Nightly build
  branches:
    include:
    - main
  always: true

variables:
  - group: ChokuretsuSecrets
resources:
  repositories:
  - repository: ChokuretsuTranslationStrings
    type: github
    endpoint: haroohie-club
    name: haroohie-club/ChokuretsuTranslationStrings
  - repository: ChokuretsuTranslationAssets
    type: github
    endpoint: haroohie-club
    name: haroohie-club/ChokuretsuTranslationAssets
  - repository: ChokuretsuTranslationUtility
    type: github
    endpoint: haroohie-club
    name: haroohie-club/ChokuretsuTranslationUtility
  - repository: NitroPacker
    type: github
    endpoint: haroohie-club
    name: haroohie-club/NitroPacker
  - repository: HaroohieCloudManager
    type: github
    endpoint: haroohie-club
    name: haroohie-club/HaroohieCloudManager

jobs:
- job:
  strategy:
    matrix:
      en:
        Language: "en"
        PatchVersion: v0.7.$(Build.BuildNumber)
        Dub: false
      it:
        Language: "it"
        PatchVersion: v0.1.$(Build.BuildNumber)
        Dub: true
      pt-BR:
        Language: "pt-BR"
        PatchVersion: v0.1.$(Build.BuildNumber)
        Dub: false
      ru:
        Language: "ru"
        PatchVersion: v0.1.$(Build.BuildNumber)
        Dub: false
  displayName: Build & Publish
  pool:
    vmImage: ubuntu-latest
  container: ghcr.io/haroohie-club/chokuretsu-devkitarm:main
  steps:
  - checkout: self
    clean: true
  - checkout: ChokuretsuTranslationStrings
  - checkout: ChokuretsuTranslationAssets
  - checkout: ChokuretsuTranslationUtility
  - checkout: NitroPacker
  - checkout: HaroohieCloudManager
  - task: DotNetCoreCLI@2
    inputs:
      command: 'run'
      projects: HaroohieCloudManager/HaroohieCloudManager/HaroohieCloudManager.csproj
      arguments: '-- download-rom -k $(SpacesKey) -s $(SpacesSecret) -u "https://nyc3.digitaloceanspaces.com" -n "haroohie" -r "bootstrap/chokuretsu/original.zip" -p "$(Build.SourcesDirectory)/ChokuretsuTranslationBuild/original.zip"'
    displayName: Download ROM
  - task: DotNetCoreCLI@2
    inputs:
      command: 'build'
      projects: ChokuretsuTranslationUtility/HaruhiChokuretsuCLI/HaruhiChokuretsuCLI.csproj
    displayName: Build HaruhiChokuretsuCLI
  - task: DotNetCoreCLI@2
    inputs:
      command: 'build'
      projects: NitroPacker/HaroohieClub.NitroPacker.Cli/HaroohieClub.NitroPacker.Cli.csproj
    displayName: Build NitroPackerCLI

  - task: PowerShell@2
    inputs:
      filePath: ChokuretsuTranslationBuild/setup.ps1
      arguments: -nitroPacker "$(Build.SourcesDirectory)/NitroPacker/HaroohieClub.NitroPacker.Cli/bin/Debug/net8.0/NitroPacker"
      workingDirectory: $(Build.SourcesDirectory)/ChokuretsuTranslationBuild
    displayName: Run setup

  - task: PowerShell@2
    inputs:
      filePath: ChokuretsuTranslationBuild/build_arc.ps1
      arguments: -haruhiCli "$(Build.SourcesDirectory)/ChokuretsuTranslationUtility/HaruhiChokuretsuCLI/bin/Debug/net8.0/HaruhiChokuretsuCLI" -stringsFolder "$(Build.SourcesDirectory)/ChokuretsuTranslationStrings" -assetsFolder "$(Build.SourcesDirectory)/ChokuretsuTranslationAssets" -devkitArm "/opt/devkitpro/devkitARM/" -resxLangCode "$(Language)" -version "$(PatchVersion)"
      workingDirectory: $(Build.SourcesDirectory)/ChokuretsuTranslationBuild
    displayName: Build archives

  - task: PowerShell@2
    inputs:
      filePath: ChokuretsuTranslationBuild/build.ps1
      arguments: -nitroPacker "$(Build.SourcesDirectory)/NitroPacker/HaroohieClub.NitroPacker.Cli/bin/Debug/net8.0/NitroPacker" -haruhiCli "$(Build.SourcesDirectory)/ChokuretsuTranslationUtility/HaruhiChokuretsuCLI/bin/Debug/net8.0/HaruhiChokuretsuCLI" -stringsFolder "$(Build.SourcesDirectory)/ChokuretsuTranslationStrings" -fontReplacementMap "$(Build.SourcesDirectory)/ChokuretsuTranslationAssets/misc/charset.json" -langCode "$(Language)"
      workingDirectory: $(Build.SourcesDirectory)/ChokuretsuTranslationBuild
    env:
      DEVKITARM: /opt/devkitpro/devkitARM/
      DEVKITPRO: /opt/devkitpro/
    displayName: Build ROM (clean OP/ED, voice subs)
  - powershell: xdelta3 -e -S -s ChokuretsuTranslationBuild/original.nds ChokuretsuTranslationBuild/HaruhiChokuretsu.nds $(Build.ArtifactStagingDirectory)/chokuretsu-patch-$(PatchVersion)-cleanoped-voicesubs.xdelta
    displayName: Create xdelta patch (clean OP/ED, voice subs)

  - task: PowerShell@2
    inputs:
      filePath: ChokuretsuTranslationBuild/build.ps1
      arguments: -nitroPacker "$(Build.SourcesDirectory)/NitroPacker/HaroohieClub.NitroPacker.Cli/bin/Debug/net8.0/NitroPacker" -haruhiCli "$(Build.SourcesDirectory)/ChokuretsuTranslationUtility/HaruhiChokuretsuCLI/bin/Debug/net8.0/HaruhiChokuretsuCLI" -stringsFolder "$(Build.SourcesDirectory)/ChokuretsuTranslationStrings" -fontReplacementMap "$(Build.SourcesDirectory)/ChokuretsuTranslationAssets/misc/charset.json" -langCode "$(Language)" -noVoiceSubs
      workingDirectory: $(Build.SourcesDirectory)/ChokuretsuTranslationBuild
    env:
      DEVKITARM: /opt/devkitpro/devkitARM/
      DEVKITPRO: /opt/devkitpro/
    displayName: Build ROM (clean OP/ED, no voice subs)
  - powershell: xdelta3 -e -S -s ChokuretsuTranslationBuild/original.nds ChokuretsuTranslationBuild/HaruhiChokuretsu.nds $(Build.ArtifactStagingDirectory)/chokuretsu-patch-$(PatchVersion)-cleanoped-novoicesubs.xdelta
    displayName: Create xdelta patch (clean OP/ED, no voice subs)

  - task: PowerShell@2
    inputs:
      filePath: ChokuretsuTranslationBuild/copy-movies.ps1
      arguments: -assetsFolder "$(Build.SourcesDirectory)/ChokuretsuTranslationAssets" -langCode "$(Language)"
      workingDirectory: $(Build.SourcesDirectory)/ChokuretsuTranslationBuild
    displayName: Copy movies
  - task: PowerShell@2
    inputs:
      filePath: ChokuretsuTranslationBuild/build.ps1
      arguments: -nitroPacker "$(Build.SourcesDirectory)/NitroPacker/HaroohieClub.NitroPacker.Cli/bin/Debug/net8.0/NitroPacker" -haruhiCli "$(Build.SourcesDirectory)/ChokuretsuTranslationUtility/HaruhiChokuretsuCLI/bin/Debug/net8.0/HaruhiChokuretsuCLI" -stringsFolder "$(Build.SourcesDirectory)/ChokuretsuTranslationStrings" -fontReplacementMap "$(Build.SourcesDirectory)/ChokuretsuTranslationAssets/misc/charset.json" -langCode "$(Language)"
      workingDirectory: $(Build.SourcesDirectory)/ChokuretsuTranslationBuild
    env:
      DEVKITARM: /opt/devkitpro/devkitARM/
      DEVKITPRO: /opt/devkitpro/
    displayName: Build ROM (subbed OP/ED, voice subs)
  - powershell: xdelta3 -e -S -s ChokuretsuTranslationBuild/original.nds ChokuretsuTranslationBuild/HaruhiChokuretsu.nds $(Build.ArtifactStagingDirectory)/chokuretsu-patch-$(PatchVersion)-subbedoped-voicesubs.xdelta
    displayName: Create xdelta patch (subbed OP/ED, voice subs)

  - task: PowerShell@2
    inputs:
      filePath: ChokuretsuTranslationBuild/build.ps1
      arguments: -nitroPacker "$(Build.SourcesDirectory)/NitroPacker/HaroohieClub.NitroPacker.Cli/bin/Debug/net8.0/NitroPacker" -haruhiCli "$(Build.SourcesDirectory)/ChokuretsuTranslationUtility/HaruhiChokuretsuCLI/bin/Debug/net8.0/HaruhiChokuretsuCLI" -stringsFolder "$(Build.SourcesDirectory)/ChokuretsuTranslationStrings" -fontReplacementMap "$(Build.SourcesDirectory)/ChokuretsuTranslationAssets/misc/charset.json" -langCode "$(Language)" -noVoiceSubs
      workingDirectory: $(Build.SourcesDirectory)/ChokuretsuTranslationBuild
    env:
      DEVKITARM: /opt/devkitpro/devkitARM/
      DEVKITPRO: /opt/devkitpro/
    displayName: Build ROM (subbed OP/ED, no voice subs)
  - powershell: xdelta3 -e -S -s ChokuretsuTranslationBuild/original.nds ChokuretsuTranslationBuild/HaruhiChokuretsu.nds $(Build.ArtifactStagingDirectory)/chokuretsu-patch-$(PatchVersion)-subbedoped-novoicesubs.xdelta
    displayName: Create xdelta patch (subbed OP/ED, no voice subs)
  
  - task: PowerShell@2
    inputs:
      filePath: ChokuretsuTranslationBuild/build_arc.ps1
      arguments: -haruhiCli "$(Build.SourcesDirectory)/ChokuretsuTranslationUtility/HaruhiChokuretsuCLI/bin/Debug/net8.0/HaruhiChokuretsuCLI" -stringsFolder "$(Build.SourcesDirectory)/ChokuretsuTranslationStrings" -assetsFolder "$(Build.SourcesDirectory)/ChokuretsuTranslationAssets" -devkitArm "/opt/devkitpro/devkitARM/" -resxLangCode "$(Language)" -version "$(PatchVersion)" -dub
      workingDirectory: $(Build.SourcesDirectory)/ChokuretsuTranslationBuild
    displayName: Build archives (with dub)
    condition: eq(variables.Dub, true)

  - task: PowerShell@2
    inputs:
      filePath: ChokuretsuTranslationBuild/copy-movies.ps1
      arguments: -assetsFolder "$(Build.SourcesDirectory)/ChokuretsuTranslationAssets" -langCode "$(Language)"
      workingDirectory: $(Build.SourcesDirectory)/ChokuretsuTranslationBuild
    displayName: Copy movies (with dub)
    condition: eq(variables.Dub, true)
  - task: PowerShell@2
    inputs:
      filePath: ChokuretsuTranslationBuild/build.ps1
      arguments: -nitroPacker "$(Build.SourcesDirectory)/NitroPacker/HaroohieClub.NitroPacker.Cli/bin/Debug/net8.0/NitroPacker" -haruhiCli "$(Build.SourcesDirectory)/ChokuretsuTranslationUtility/HaruhiChokuretsuCLI/bin/Debug/net8.0/HaruhiChokuretsuCLI" -stringsFolder "$(Build.SourcesDirectory)/ChokuretsuTranslationStrings" -fontReplacementMap "$(Build.SourcesDirectory)/ChokuretsuTranslationAssets/misc/charset.json" -langCode "$(Language)"
      workingDirectory: $(Build.SourcesDirectory)/ChokuretsuTranslationBuild
    env:
      DEVKITARM: /opt/devkitpro/devkitARM/
      DEVKITPRO: /opt/devkitpro/
    displayName: Build ROM (dub, voice subs)
    condition: eq(variables.Dub, true)
  - powershell: xdelta3 -e -S -s ChokuretsuTranslationBuild/original.nds ChokuretsuTranslationBuild/HaruhiChokuretsu.nds $(Build.ArtifactStagingDirectory)/chokuretsu-patch-$(PatchVersion)-dubbed-voicesubs.xdelta
    displayName: Create xdelta patch (dub, voice subs)
    condition: eq(variables.Dub, true)

  - task: PowerShell@2
    inputs:
      filePath: ChokuretsuTranslationBuild/build.ps1
      arguments: -nitroPacker "$(Build.SourcesDirectory)/NitroPacker/HaroohieClub.NitroPacker.Cli/bin/Debug/net8.0/NitroPacker" -haruhiCli "$(Build.SourcesDirectory)/ChokuretsuTranslationUtility/HaruhiChokuretsuCLI/bin/Debug/net8.0/HaruhiChokuretsuCLI" -stringsFolder "$(Build.SourcesDirectory)/ChokuretsuTranslationStrings" -fontReplacementMap "$(Build.SourcesDirectory)/ChokuretsuTranslationAssets/misc/charset.json" -langCode "$(Language)" -noVoiceSubs
      workingDirectory: $(Build.SourcesDirectory)/ChokuretsuTranslationBuild
    env:
      DEVKITARM: /opt/devkitpro/devkitARM/
      DEVKITPRO: /opt/devkitpro/
    displayName: Build ROM (dub, no voice subs)
    condition: eq(variables.Dub, true)
  - powershell: xdelta3 -e -S -s ChokuretsuTranslationBuild/original.nds ChokuretsuTranslationBuild/HaruhiChokuretsu.nds $(Build.ArtifactStagingDirectory)/chokuretsu-patch-$(PatchVersion)-dubbed-novoicesubs.xdelta
    displayName: Create xdelta patch (dub, no voice subs)
    condition: eq(variables.Dub, true)

  - powershell: |
      $patches = ""
      if ($env:Dub -eq $True) {
        $patches += "Complete Patch (Dubbed):$($env:BUILD_ARTIFACTSTAGINGDIRECTORY)/chokuretsu-patch-$($env:PatchVersion)-dubbed-novoicesubs.xdelta;"
        $patches += "Dubbed, No Voice Subs Patch:$($env:BUILD_ARTIFACTSTAGINGDIRECTORY)/chokuretsu-patch-$($env:PatchVersion)-dubbed-novoicesubs.xdelta;"
        $patches += "Complete Patch (No Dub):$($env:BUILD_ARTIFACTSTAGINGDIRECTORY)/chokuretsu-patch-$($env:PatchVersion)-subbedoped-voicesubs.xdelta;"
      } else {
        $patches += "Complete Patch:$($env:BUILD_ARTIFACTSTAGINGDIRECTORY)/chokuretsu-patch-$($env:PatchVersion)-subbedoped-voicesubs.xdelta;"
      }
      $patches += "Subbed OP/ED, No Voice Subs Patch:$($env:BUILD_ARTIFACTSTAGINGDIRECTORY)/chokuretsu-patch-$($env:PatchVersion)-subbedoped-novoicesubs.xdelta;"
      $patches += "Clean OP/ED, Voice Subs Patch:$($env:BUILD_ARTIFACTSTAGINGDIRECTORY)/chokuretsu-patch-$($env:PatchVersion)-cleanoped-voicesubs.xdelta;"
      $patches += "Clean OP/ED, No Voice Subs Patch:$($env:BUILD_ARTIFACTSTAGINGDIRECTORY)/chokuretsu-patch-$($env:PatchVersion)-cleanoped-novoicesubs.xdelta"

      Write-Host $patches
      dotnet run --project HaroohieCloudManager/HaroohieCloudManager/HaroohieCloudManager.csproj -- upload-patches -k $env:SpacesKey -s $env:SpacesSecret -u "https://nyc3.digitaloceanspaces.com" -n "haroohie" -g "chokuretsu" -l "$env:Language" -v "$env:PatchVersion" -p "$patches" -w $env:WebhookUri
    env:
      Language: $(Language)
      PatchVersion: $(PatchVersion)
      SpacesKey: $(SpacesKey)
      SpacesSecret: $(SpacesSecret)
      WebhookUri: $(DiscordWebHook)
      Dub: $(Dub)
    displayName: Copy patches to Digital Ocean storage and post patch notification to Discord